{
  "address": "0xA69966fCF54306F0759bCEf1f6459ef405CEE20A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_chainlist",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_startChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hops",
          "type": "uint256"
        }
      ],
      "name": "Completed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Go",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hops",
          "type": "uint256"
        }
      ],
      "name": "NextHop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGE",
      "outputs": [
        {
          "internalType": "contract IMessageV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "CHAINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "endpoint",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "confirmations",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainlist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_chains",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_endpoints",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_confirmations",
          "type": "uint16[]"
        }
      ],
      "name": "configureBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "go",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "messageProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setExsig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxFee",
          "type": "uint256"
        }
      ],
      "name": "setMaxfee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxGas",
          "type": "uint256"
        }
      ],
      "name": "setMaxgas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6aabba8d6b7e79752c98aebca9d212eac8907f38b18cbfb20cd00ffeded47a61",
  "receipt": {
    "to": null,
    "from": "0x02C4870d0af82440c1c768e078112FB377a1Fc93",
    "contractAddress": "0xA69966fCF54306F0759bCEf1f6459ef405CEE20A",
    "transactionIndex": 0,
    "gasUsed": "1727203",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000800000000000000000000000000000000000000000000000000400000000000400000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000040000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xab74a06e755b630fcdf36e92d40d5b5d938bcc902189e6f9888873826425271d",
    "transactionHash": "0x6aabba8d6b7e79752c98aebca9d212eac8907f38b18cbfb20cd00ffeded47a61",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8704042,
        "transactionHash": "0x6aabba8d6b7e79752c98aebca9d212eac8907f38b18cbfb20cd00ffeded47a61",
        "address": "0xA69966fCF54306F0759bCEf1f6459ef405CEE20A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002c4870d0af82440c1c768e078112fb377a1fc93"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xab74a06e755b630fcdf36e92d40d5b5d938bcc902189e6f9888873826425271d"
      }
    ],
    "blockNumber": 8704042,
    "cumulativeGasUsed": "1727203",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      421614,
      43113,
      84532,
      97,
      44787,
      338,
      4002,
      1452,
      10200,
      1666700000,
      599,
      65,
      11155420,
      80001,
      1442,
      943,
      534351,
      195
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "c4499a544034e358a323c93fe10ba517",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_chainlist\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hops\",\"type\":\"uint256\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Go\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hops\",\"type\":\"uint256\"}],\"name\":\"NextHop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE\",\"outputs\":[{\"internalType\":\"contract IMessageV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CHAINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"endpoint\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"confirmations\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_chains\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_endpoints\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_confirmations\",\"type\":\"uint16[]\"}],\"name\":\"configureBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"go\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"messageProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setExsig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxFee\",\"type\":\"uint256\"}],\"name\":\"setMaxfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGas\",\"type\":\"uint256\"}],\"name\":\"setMaxgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configureBridge(address,uint256[],uint256[],address[],uint16[])\":{\"notice\":\"OWNER \"},\"go()\":{\"notice\":\"Kicks off the initial message, which will then be sent from chain to chain until it ends up back at the original chain that sent the message. \"},\"messageProcess(uint256,uint256,address,address,uint256,bytes)\":{\"notice\":\"Called by the bridge, this is where we handle the received message from the source chain. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ATWTest.sol\":\"ATWTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ATWTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2023 Atlas (atlas@cryptolink.tech)\\npragma solidity =0.8.17;\\n\\nimport \\\"./includes/MessageV3Client.sol\\\";\\n\\ncontract ATWTest is MessageV3Client {\\n    uint[] public chainlist;\\n\\n    event Go();\\n    event Completed(uint _startChainId, uint hops);\\n    event NextHop(uint startChainId, uint hops);\\n\\n    constructor(uint[] memory _chainlist) {\\n        chainlist = _chainlist;\\n    }\\n\\n    /**\\n     * Kicks off the initial message, which will then be sent from chain to chain until\\n     * it ends up back at the original chain that sent the message.\\n     * \\n     */\\n    function go() external onlyOwner {\\n        // create cross chain message\\n        bytes memory _data = abi.encode(block.chainid, 0, \\\"Hello World!\\\");\\n\\n        // send message\\n        _sendMessage(chainlist[_getNextChainIndex()], address(0), _data);\\n\\n        emit Go();\\n    }\\n\\n    /**\\n     * Called by the bridge, this is where we handle the received message from the source chain.\\n     * \\n     */\\n    function messageProcess(uint, uint _sourceChainId, address, address, uint, bytes calldata _data) external override onlyActiveBridge(_sourceChainId) {\\n        // decode message\\n        (uint _startChainId, uint _hop, string memory _message) = abi.decode(_data, (uint, uint, string));\\n\\n        if(_startChainId == block.chainid) {\\n            // if we are where the message started, we are done, we went around all of the chains!\\n            emit Completed(_startChainId, _hop);\\n        } else {\\n            // create cross chain message\\n            bytes memory _newData = abi.encode(_startChainId, _hop+1, _message);\\n\\n            // send message\\n            _sendMessage(chainlist[_getNextChainIndex()], address(0), _newData);\\n\\n            emit NextHop(_startChainId, _hop);\\n        }\\n    }\\n\\n    function _getNextChainIndex() internal view returns (uint _index){\\n        for(uint x; x < chainlist.length; x++) {\\n            if(chainlist[x] == block.chainid) {\\n                _index = x;\\n                break;\\n            }\\n        }\\n\\n        _index = _index + 1;\\n        if(_index > chainlist.length-1) {\\n            _index = 0;\\n        }\\n        return _index;\\n    }\\n}\",\"keccak256\":\"0xadad7d028cb2952114f914972aaf052a462bc5d8112f7a63041f87f67b2c8b38\",\"license\":\"MIT\"},\"contracts/includes/IMessageV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2021-2023 Atlas\\n// security-contact: atlas@cryptolink.tech\\npragma solidity ^0.8.9;\\n\\ninterface IMessageV3 {\\n    function chainsig() external view returns (address signer);\\n    function weth() external view returns (address wethTokenAddress);\\n    function feeToken() external view returns (address feeToken);\\n    function feeTokenDecimals() external view returns (uint feeTokenDecimals);\\n    function minFee() external view returns (uint minFee);\\n    function bridgeEnabled() external view returns (bool bridgeEnabled);\\n    function takeFeesOffline() external view returns (bool takeFeesOffline);\\n    function whitelistOnly() external view returns (bool whitelistOnly);\\n\\n    function enabledChains(uint destChainId) external view returns (bool enabled);\\n    function customSourceFee(address caller) external view returns (uint customSourceFee);\\n    function maxgas(address caller) external view returns (uint maxgas);\\n    function exsig(address caller) external view returns (address signer);\\n\\n    // @dev backwards compat with BridgeClient\\n    function minTokenForChain(uint chainId) external returns (uint amount);\\n\\n    function sendMessage(address recipient, uint chain, bytes calldata data, uint16 confirmations, bool express) external returns (uint txId);\\n    // @dev backwards compat with BridgeClient\\n    function sendRequest(address recipient, uint chainId, uint amount, address referrer, bytes calldata data, uint16 confirmations) external returns (uint txId);\\n\\n    function setExsig(address signer) external;\\n    function setMaxgas(uint maxgas) external;\\n    function setMaxfee(uint maxfee) external;\\n}\",\"keccak256\":\"0xa5c2bef50887e7b344f0d10acd1bfc72bc292fb27c32409a40064a4654e87b86\",\"license\":\"MIT\"},\"contracts/includes/MessageV3Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// (c)2021-2023 Atlas\\n// security-contact: atlas@cryptolink.tech\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IMessageV3.sol\\\";\\n\\n/**\\n * @title MessageV3 Client\\n * @author CryptoLink.Tech <atlas@cryptolink.tech>\\n */\\nabstract contract MessageV3Client is Ownable {\\n    IMessageV3 public BRIDGE;\\n    IERC20 public FEE_TOKEN;\\n\\n    struct ChainData {\\n        uint fee; // MIN FEE in ether in \\\"feeToken\\\" normalized to 18 decimals\\n        uint price; // fee for us (you) to charge on source when sending to this dest\\n        address endpoint; // dest chain contract address\\n        uint16 confirmations; // source confirmations\\n    }\\n\\n    mapping(uint => ChainData) public CHAINS;\\n\\n    modifier onlySelfBridge(address _sender, uint _sourceChainId) {\\n        require(msg.sender == address(BRIDGE), \\\"not authorized\\\");\\n        require(_sender == CHAINS[_sourceChainId].endpoint, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveBridge(uint _destinationChainId) {\\n        require(CHAINS[_destinationChainId].endpoint != address(0), \\\"destination chain not active\\\");\\n        _;\\n    }\\n\\n    /** BRIDGE RECEIVER */\\n    function messageProcess(uint, uint _sourceChainId, address _sender, address, uint, bytes calldata _data) external virtual onlySelfBridge (_sender, _sourceChainId) {\\n    }\\n\\n    /** BRIDGE SENDER */\\n    // @dev backwards compat with BridgeClientV2\\n    function _sendMessage(uint _destinationChainId, address, bytes memory _data) internal returns (uint _txId) {\\n        ChainData memory _chain = CHAINS[_destinationChainId];\\n        return IMessageV3(BRIDGE).sendMessage(\\n            _chain.endpoint,      // contract address on destination chain\\n            _destinationChainId,  // id of the destination chain\\n            _data,                // arbitrary data package to send\\n            _chain.confirmations, // amount of required transaction confirmations\\n            false                 // send express mode on destination\\n        );\\n    }\\n\\n    function _sendMessageExpress(uint _destinationChainId, address, bytes memory _data) internal returns (uint _txId) {\\n        ChainData memory _chain = CHAINS[_destinationChainId];\\n        return IMessageV3(BRIDGE).sendMessage(\\n            _chain.endpoint,      // contract address on destination chain\\n            _destinationChainId,  // id of the destination chain\\n            _data,                // arbitrary data package to send\\n            _chain.confirmations, // amount of required transaction confirmations\\n            true                  // send express mode on destination\\n        );\\n    }\\n\\n    /** OWNER */\\n    function configureBridge(\\n        address _bridge, \\n        uint[] calldata _chains,\\n        uint[] calldata _prices,\\n        address[] calldata _endpoints, \\n        uint16[] calldata _confirmations\\n    ) external onlyOwner {\\n        if(_bridge == address(0)) {\\n            if     (block.chainid == 1)         _bridge = address(0); // Ethereum\\n            else if(block.chainid == 43114)     _bridge = address(0); // Avalanche\\n            else if(block.chainid == 8453)      _bridge = address(0); // Base\\n            else if(block.chainid == 56)        _bridge = address(0); // Binance\\n            else if(block.chainid == 42220)     _bridge = address(0); // Celo \\n            else if(block.chainid == 25)        _bridge = address(0); // Cronos\\n            else if(block.chainid == 250)       _bridge = address(0); // Fantom\\n            else if(block.chainid == 1777)      _bridge = address(0); // Gauss\\n            else if(block.chainid == 1666600000)_bridge = address(0); // Harmony\\n            else if(block.chainid == 1088)      _bridge = address(0); // Metis\\n            else if(block.chainid == 42262)     _bridge = address(0); // Oasis\\n            else if(block.chainid == 137)       _bridge = address(0); // Polygon\\n            else if(block.chainid == 369)       _bridge = address(0); // Pulsechain\\n\\n            else if(block.chainid == 421614)     _bridge = address(0x207CbCa48258591CD1e953739c663184A02bB320); // Arbitrum Testnet (sepolia)\\n            else if(block.chainid == 1313161555) _bridge = address(0x3B5b764229b2EdE0162220aF51ab6bf7f8527a4F); // Aurora Testnet\\n            else if(block.chainid == 43113)      _bridge = address(0x24BEFF24327C8E956d5FC74a5C502038683cDc0A); // Avalanche Testnet\\n            else if(block.chainid == 84532)      _bridge = address(0x18716F6E46a66919deacD3c6fd4fa6Da02fa30b2); // Base Testnet (sepolia)\\n            else if(block.chainid == 97)         _bridge = address(0x535CCeD6C471eE907eEB3bBECf1C8223208Ca5e0); // Binance Testnet\\n            else if(block.chainid == 7701)       _bridge = address(0x3B5b764229b2EdE0162220aF51ab6bf7f8527a4F); // Canto Testnet\\n            else if(block.chainid == 44787)      _bridge = address(0x6e658066340C7cae09dB68F5339Ddc4b806d3598); // Celo Testnet\\n            else if(block.chainid == 338)        _bridge = address(0x8eb10FC1793094113E7f52bA159A6AeB54CaB92c); // Cronos Testnet \\n            else if(block.chainid == 4002)       _bridge = address(0x7d474aA4DbDBc276b67abcc5f54262978b369cEC); // Fantom Testnet\\n            else if(block.chainid == 1452)       _bridge = address(0x6c83DC6C5128ff3E073E737523D2176aAeB08525); // Gauss Testnet\\n            else if(block.chainid == 10200)      _bridge = address(0x146449fb27e4A4B4721a9c5742f3baB1e34eb31f); // Gnosis Testnet\\n            else if(block.chainid == 1666700000) _bridge = address(0xE0a5cBb1f15a84C4a4A0f7E98F9721997182deD6); // Harmony Testnet\\n            else if(block.chainid == 2221)       _bridge = address(0x3B5b764229b2EdE0162220aF51ab6bf7f8527a4F); // Kava Testnet\\n            else if(block.chainid == 59140)      _bridge = address(0x3B5b764229b2EdE0162220aF51ab6bf7f8527a4F); // Linea Testnet\\n            else if(block.chainid == 599)        _bridge = address(0x4f313cB864BD7138Fdb35337182D5b0E78d9fB33); // Metis Testnet\\n            else if(block.chainid == 42261)      _bridge = address(0x566B40Dd59A868c244E1353368e08ddaD1C1d74f); // Oasis Emerald Testnet\\n            else if(block.chainid == 23295)      _bridge = address(0x566B40Dd59A868c244E1353368e08ddaD1C1d74f); // Oasis Sapphire Testnet\\n            else if(block.chainid == 65)         _bridge = address(0xF1FBB3E9977dAcF3909Ab541792cB2Bba10FFD5E); // OKEx Testnet\\n            else if(block.chainid == 11155420)   _bridge = address(0xB4245BFEA4AfE63c7F7863D090166890e9FEf1b2); // Optimism Testnet\\n            else if(block.chainid == 80001)      _bridge = address(0x08A2d304547A4B93B254d906502A3fc778D78412); // Polygon Testnet\\n            else if(block.chainid == 1442)       _bridge = address(0xcA877c797D599bE2Bf8C897a3B9eba6bA4113332); // Polygon zkEVM Testnet\\n            else if(block.chainid == 943)        _bridge = address(0x4f313cB864BD7138Fdb35337182D5b0E78d9fB33); // Pulse Testnet\\n            else if(block.chainid == 534351)     _bridge = address(0x23E2CE1fF48cF21239f8c5eb783CE89df02B6f35); // Scroll Testnet (sepolia)\\n            else if(block.chainid == 195)        _bridge = address(0x4f313cB864BD7138Fdb35337182D5b0E78d9fB33); // X1 Testnet\\n            require(_bridge != address(0), \\\"invalid chain in list\\\");\\n        }\\n\\n        BRIDGE    = IMessageV3(_bridge);\\n        FEE_TOKEN = IERC20(BRIDGE.feeToken());\\n\\n        uint _chainsLength = _chains.length;\\n        for(uint x=0; x < _chainsLength; x++) {\\n            CHAINS[_chains[x]].fee = BRIDGE.minTokenForChain(_chains[x]);\\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\\n            CHAINS[_chains[x]].endpoint = _endpoints[x];\\n            CHAINS[_chains[x]].price = _prices[x];\\n        }\\n\\n        // approve bridge for source chain fees (limited per transaction with setMaxfee)\\n        if(address(FEE_TOKEN) != address(0)) {\\n            FEE_TOKEN.approve(address(BRIDGE), type(uint).max);\\n        }\\n\\n        // approve bridge for destination gas fees (limited per transaction with setMaxgas)\\n        if(address(BRIDGE.weth()) != address(0)) {\\n            IERC20(BRIDGE.weth()).approve(address(BRIDGE), type(uint).max);\\n        }\\n    }\\n\\n    function setExsig(address _signer) external onlyOwner {\\n        BRIDGE.setExsig(_signer);\\n    }\\n\\n    function setMaxgas(uint _maxGas) external onlyOwner {\\n        BRIDGE.setMaxgas(_maxGas);\\n    }\\n\\n    function setMaxfee(uint _maxFee) external onlyOwner {\\n        BRIDGE.setMaxfee(_maxFee);\\n    }\\n}\",\"keccak256\":\"0xd237b03c0eb99c93300ec6ae8f8cc6ab387c6cbcd2731dd83b00f8225e550cc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200180638038062001806833981016040819052620000349162000129565b6200003f336200005c565b805162000054906004906020840190620000ac565b5050620001f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620000ea579160200282015b82811115620000ea578251825591602001919060010190620000cd565b50620000f8929150620000fc565b5090565b5b80821115620000f85760008155600101620000fd565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013d57600080fd5b82516001600160401b03808211156200015557600080fd5b818501915085601f8301126200016a57600080fd5b8151818111156200017f576200017f62000113565b8060051b604051601f19603f83011681018181108582111715620001a757620001a762000113565b604052918252848201925083810185019188831115620001c657600080fd5b938501935b82851015620001e657845184529385019392850192620001cb565b98975050505050505050565b61160480620002026000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806392ae12fd1161008c578063e47ad74d11610066578063e47ad74d146101eb578063ee9a31a2146101fe578063f2fde38b14610211578063f89d95a01461022457600080fd5b806392ae12fd1461014d578063b479a961146101c5578063c60853f6146101d857600080fd5b80630f59f83a146100d45780635f46e740146100de578063715018a6146100f157806373717b08146100f95780637befab32146101295780638da5cb5b1461013c575b600080fd5b6100dc610245565b005b6100dc6100ec366004611147565b6102f2565b6100dc610443565b60025461010c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc610137366004611248565b610457565b6000546001600160a01b031661010c565b61019261015b366004611321565b6003602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900461ffff1684565b604051610120949392919093845260208401929092526001600160a01b0316604083015261ffff16606082015260800190565b6100dc6101d3366004611321565b610dcc565b6100dc6101e636600461133a565b610e36565b6100dc6101f9366004611321565b610e70565b60015461010c906001600160a01b031681565b6100dc61021f36600461133a565b610ea9565b610237610232366004611321565b610f22565b604051908152602001610120565b61024d610f43565b604080514660208201526000918101829052606080820152600c60808201526b48656c6c6f20576f726c642160a01b60a082015260c00160405160208183030381529060405290506102c560046102a2610f9d565b815481106102b2576102b261135e565b9060005260206000200154600083611015565b506040517f64dac408bbc3afe7f7c9b940c18717de279915af1e42ad16e1aa03bfc069074f90600090a150565b60008681526003602052604090206002015486906001600160a01b03166103605760405162461bcd60e51b815260206004820152601c60248201527f64657374696e6174696f6e20636861696e206e6f74206163746976650000000060448201526064015b60405180910390fd5b600080806103708587018761138a565b9250925092504683036103bb5760408051848152602081018490527f12a1c1987aa73679916aba446c3dc908aba127ae71d422c51cece3350d680f08910160405180910390a1610436565b6000836103c9846001611464565b836040516020016103dc939291906114c3565b60405160208183030381529060405290506103fa60046102a2610f9d565b5060408051858152602081018590527f5ae98332e86ef6d407bdfcac01a24ce2d1b0e308ca5a2a398b93fa440042dd4e910160405180910390a1505b5050505050505050505050565b61044b610f43565b61045560006110e2565b565b61045f610f43565b6001600160a01b03891661091c574660010361047e57600098506108ce565b4661a86a0361049057600098506108ce565b46612105036104a257600098506108ce565b466038036104b357600098506108ce565b4661a4ec036104c557600098506108ce565b466019036104d657600098506108ce565b4660fa036104e757600098506108ce565b466106f1036104f957600098506108ce565b466363564c400361050d57600098506108ce565b466104400361051f57600098506108ce565b4661a5160361053157600098506108ce565b4660890361054257600098506108ce565b466101710361055457600098506108ce565b4662066eee0361057a5773207cbca48258591cd1e953739c663184a02bb32098506108ce565b46634e454153036105a157733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661a869036105c6577324beff24327c8e956d5fc74a5c502038683cdc0a98506108ce565b4662014a34036105ec577318716f6e46a66919deacd3c6fd4fa6da02fa30b298506108ce565b466061036106105773535cced6c471ee907eeb3bbecf1c8223208ca5e098506108ce565b46611e150361063557733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661aef30361065a57736e658066340c7cae09db68f5339ddc4b806d359898506108ce565b466101520361067f57738eb10fc1793094113e7f52ba159a6aeb54cab92c98506108ce565b46610fa2036106a457737d474aa4dbdbc276b67abcc5f54262978b369cec98506108ce565b466105ac036106c957736c83dc6c5128ff3e073e737523d2176aaeb0852598506108ce565b466127d8036106ee5773146449fb27e4a4b4721a9c5742f3bab1e34eb31f98506108ce565b46636357d2e0036107155773e0a5cbb1f15a84c4a4a0f7e98f9721997182ded698506108ce565b466108ad0361073a57733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661e7040361075f57733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b466102570361078457734f313cb864bd7138fdb35337182d5b0e78d9fb3398506108ce565b4661a515036107a95773566b40dd59a868c244e1353368e08ddad1c1d74f98506108ce565b46615aff036107ce5773566b40dd59a868c244e1353368e08ddad1c1d74f98506108ce565b466041036107f25773f1fbb3e9977dacf3909ab541792cb2bba10ffd5e98506108ce565b4662aa37dc036108185773b4245bfea4afe63c7f7863d090166890e9fef1b298506108ce565b46620138810361083e577308a2d304547a4b93b254d906502a3fc778d7841298506108ce565b466105a2036108635773ca877c797d599be2bf8c897a3b9eba6ba411333298506108ce565b466103af0361088857734f313cb864bd7138fdb35337182d5b0e78d9fb3398506108ce565b466208274f036108ae577323e2ce1ff48cf21239f8c5eb783ce89df02b6f3598506108ce565b4660c3036108ce57734f313cb864bd7138fdb35337182d5b0e78d9fb3398505b6001600160a01b03891661091c5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590818da185a5b881a5b881b1a5cdd605a1b6044820152606401610357565b600180546001600160a01b0319166001600160a01b038b169081179091556040805163647846a560e01b8152905163647846a5916004808201926020929091908290030181865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099991906114e2565b600280546001600160a01b0319166001600160a01b03929092169190911790558660005b81811015610bc8576001546001600160a01b03166327c7484e8b8b848181106109e8576109e861135e565b905060200201356040518263ffffffff1660e01b8152600401610a0d91815260200190565b6020604051808303816000875af1158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5091906114ff565b600360008c8c85818110610a6657610a6661135e565b90506020020135815260200190815260200160002060000181905550838382818110610a9457610a9461135e565b9050602002016020810190610aa99190611518565b600360008c8c85818110610abf57610abf61135e565b90506020020135815260200190815260200160002060020160146101000a81548161ffff021916908361ffff160217905550858582818110610b0357610b0361135e565b9050602002016020810190610b18919061133a565b600360008c8c85818110610b2e57610b2e61135e565b90506020020135815260200190815260200160002060020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878782818110610b7c57610b7c61135e565b90506020020135600360008c8c85818110610b9957610b9961135e565b905060200201358152602001908152602001600020600101819055508080610bc09061153c565b9150506109bd565b506002546001600160a01b031615610c565760025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611555565b505b60015460408051633fc8cef360e01b815290516000926001600160a01b031691633fc8cef39160048083019260209291908290030181865afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc491906114e2565b6001600160a01b031614610dc057600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4991906114e2565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190611555565b50505050505050505050565b610dd4610f43565b60015460405163b479a96160e01b8152600481018390526001600160a01b039091169063b479a961906024015b600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b5050505050565b610e3e610f43565b60015460405163630429fb60e11b81526001600160a01b0383811660048301529091169063c60853f690602401610e01565b610e78610f43565b60015460405163e47ad74d60e01b8152600481018390526001600160a01b039091169063e47ad74d90602401610e01565b610eb1610f43565b6001600160a01b038116610f165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610357565b610f1f816110e2565b50565b60048181548110610f3257600080fd5b600091825260209091200154905081565b6000546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610357565b6000805b600454811015610fe9574660048281548110610fbf57610fbf61135e565b906000526020600020015403610fd757809150610fe9565b80610fe18161153c565b915050610fa1565b50610ff5816001611464565b60045490915061100790600190611577565b811115611012575060005b90565b6000838152600360209081526040808320815160808101835281548152600180830154948201949094526002909101546001600160a01b03808216838501819052600160a01b90920461ffff166060840181905294549351633f6b724360e21b8152929493169263fdadc90c9261109692918a91899190899060040161158a565b6020604051808303816000875af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d991906114ff565b95945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610f1f57600080fd5b600080600080600080600060c0888a03121561116257600080fd5b8735965060208801359550604088013561117b81611132565b9450606088013561118b81611132565b93506080880135925060a088013567ffffffffffffffff808211156111af57600080fd5b818a0191508a601f8301126111c357600080fd5b8135818111156111d257600080fd5b8b60208285010111156111e457600080fd5b60208301945080935050505092959891949750929550565b60008083601f84011261120e57600080fd5b50813567ffffffffffffffff81111561122657600080fd5b6020830191508360208260051b850101111561124157600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561126657600080fd5b893561127181611132565b985060208a013567ffffffffffffffff8082111561128e57600080fd5b61129a8d838e016111fc565b909a50985060408c01359150808211156112b357600080fd5b6112bf8d838e016111fc565b909850965060608c01359150808211156112d857600080fd5b6112e48d838e016111fc565b909650945060808c01359150808211156112fd57600080fd5b5061130a8c828d016111fc565b915080935050809150509295985092959850929598565b60006020828403121561133357600080fd5b5035919050565b60006020828403121561134c57600080fd5b813561135781611132565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561139f57600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156113c557600080fd5b818601915086601f8301126113d957600080fd5b8135818111156113eb576113eb611374565b604051601f8201601f19908116603f0116810190838211818310171561141357611413611374565b8160405282815289602084870101111561142c57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052601160045260246000fd5b808201808211156114775761147761144e565b92915050565b6000815180845260005b818110156114a357602081850181015186830182015201611487565b506000602082860101526020601f19601f83011685010191505092915050565b8381528260208201526060604082015260006110d9606083018461147d565b6000602082840312156114f457600080fd5b815161135781611132565b60006020828403121561151157600080fd5b5051919050565b60006020828403121561152a57600080fd5b813561ffff8116811461135757600080fd5b60006001820161154e5761154e61144e565b5060010190565b60006020828403121561156757600080fd5b8151801515811461135757600080fd5b818103818111156114775761147761144e565b60018060a01b038616815284602082015260a0604082015260006115b160a083018661147d565b61ffff94909416606083015250901515608090910152939250505056fea2646970667358221220a986484854054fcb8218b5bb062bbf49bf1dcc84e5ddcdb20330467958b9565264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806392ae12fd1161008c578063e47ad74d11610066578063e47ad74d146101eb578063ee9a31a2146101fe578063f2fde38b14610211578063f89d95a01461022457600080fd5b806392ae12fd1461014d578063b479a961146101c5578063c60853f6146101d857600080fd5b80630f59f83a146100d45780635f46e740146100de578063715018a6146100f157806373717b08146100f95780637befab32146101295780638da5cb5b1461013c575b600080fd5b6100dc610245565b005b6100dc6100ec366004611147565b6102f2565b6100dc610443565b60025461010c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100dc610137366004611248565b610457565b6000546001600160a01b031661010c565b61019261015b366004611321565b6003602052600090815260409020805460018201546002909201549091906001600160a01b03811690600160a01b900461ffff1684565b604051610120949392919093845260208401929092526001600160a01b0316604083015261ffff16606082015260800190565b6100dc6101d3366004611321565b610dcc565b6100dc6101e636600461133a565b610e36565b6100dc6101f9366004611321565b610e70565b60015461010c906001600160a01b031681565b6100dc61021f36600461133a565b610ea9565b610237610232366004611321565b610f22565b604051908152602001610120565b61024d610f43565b604080514660208201526000918101829052606080820152600c60808201526b48656c6c6f20576f726c642160a01b60a082015260c00160405160208183030381529060405290506102c560046102a2610f9d565b815481106102b2576102b261135e565b9060005260206000200154600083611015565b506040517f64dac408bbc3afe7f7c9b940c18717de279915af1e42ad16e1aa03bfc069074f90600090a150565b60008681526003602052604090206002015486906001600160a01b03166103605760405162461bcd60e51b815260206004820152601c60248201527f64657374696e6174696f6e20636861696e206e6f74206163746976650000000060448201526064015b60405180910390fd5b600080806103708587018761138a565b9250925092504683036103bb5760408051848152602081018490527f12a1c1987aa73679916aba446c3dc908aba127ae71d422c51cece3350d680f08910160405180910390a1610436565b6000836103c9846001611464565b836040516020016103dc939291906114c3565b60405160208183030381529060405290506103fa60046102a2610f9d565b5060408051858152602081018590527f5ae98332e86ef6d407bdfcac01a24ce2d1b0e308ca5a2a398b93fa440042dd4e910160405180910390a1505b5050505050505050505050565b61044b610f43565b61045560006110e2565b565b61045f610f43565b6001600160a01b03891661091c574660010361047e57600098506108ce565b4661a86a0361049057600098506108ce565b46612105036104a257600098506108ce565b466038036104b357600098506108ce565b4661a4ec036104c557600098506108ce565b466019036104d657600098506108ce565b4660fa036104e757600098506108ce565b466106f1036104f957600098506108ce565b466363564c400361050d57600098506108ce565b466104400361051f57600098506108ce565b4661a5160361053157600098506108ce565b4660890361054257600098506108ce565b466101710361055457600098506108ce565b4662066eee0361057a5773207cbca48258591cd1e953739c663184a02bb32098506108ce565b46634e454153036105a157733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661a869036105c6577324beff24327c8e956d5fc74a5c502038683cdc0a98506108ce565b4662014a34036105ec577318716f6e46a66919deacd3c6fd4fa6da02fa30b298506108ce565b466061036106105773535cced6c471ee907eeb3bbecf1c8223208ca5e098506108ce565b46611e150361063557733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661aef30361065a57736e658066340c7cae09db68f5339ddc4b806d359898506108ce565b466101520361067f57738eb10fc1793094113e7f52ba159a6aeb54cab92c98506108ce565b46610fa2036106a457737d474aa4dbdbc276b67abcc5f54262978b369cec98506108ce565b466105ac036106c957736c83dc6c5128ff3e073e737523d2176aaeb0852598506108ce565b466127d8036106ee5773146449fb27e4a4b4721a9c5742f3bab1e34eb31f98506108ce565b46636357d2e0036107155773e0a5cbb1f15a84c4a4a0f7e98f9721997182ded698506108ce565b466108ad0361073a57733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b4661e7040361075f57733b5b764229b2ede0162220af51ab6bf7f8527a4f98506108ce565b466102570361078457734f313cb864bd7138fdb35337182d5b0e78d9fb3398506108ce565b4661a515036107a95773566b40dd59a868c244e1353368e08ddad1c1d74f98506108ce565b46615aff036107ce5773566b40dd59a868c244e1353368e08ddad1c1d74f98506108ce565b466041036107f25773f1fbb3e9977dacf3909ab541792cb2bba10ffd5e98506108ce565b4662aa37dc036108185773b4245bfea4afe63c7f7863d090166890e9fef1b298506108ce565b46620138810361083e577308a2d304547a4b93b254d906502a3fc778d7841298506108ce565b466105a2036108635773ca877c797d599be2bf8c897a3b9eba6ba411333298506108ce565b466103af0361088857734f313cb864bd7138fdb35337182d5b0e78d9fb3398506108ce565b466208274f036108ae577323e2ce1ff48cf21239f8c5eb783ce89df02b6f3598506108ce565b4660c3036108ce57734f313cb864bd7138fdb35337182d5b0e78d9fb3398505b6001600160a01b03891661091c5760405162461bcd60e51b81526020600482015260156024820152741a5b9d985b1a590818da185a5b881a5b881b1a5cdd605a1b6044820152606401610357565b600180546001600160a01b0319166001600160a01b038b169081179091556040805163647846a560e01b8152905163647846a5916004808201926020929091908290030181865afa158015610975573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099991906114e2565b600280546001600160a01b0319166001600160a01b03929092169190911790558660005b81811015610bc8576001546001600160a01b03166327c7484e8b8b848181106109e8576109e861135e565b905060200201356040518263ffffffff1660e01b8152600401610a0d91815260200190565b6020604051808303816000875af1158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5091906114ff565b600360008c8c85818110610a6657610a6661135e565b90506020020135815260200190815260200160002060000181905550838382818110610a9457610a9461135e565b9050602002016020810190610aa99190611518565b600360008c8c85818110610abf57610abf61135e565b90506020020135815260200190815260200160002060020160146101000a81548161ffff021916908361ffff160217905550858582818110610b0357610b0361135e565b9050602002016020810190610b18919061133a565b600360008c8c85818110610b2e57610b2e61135e565b90506020020135815260200190815260200160002060020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550878782818110610b7c57610b7c61135e565b90506020020135600360008c8c85818110610b9957610b9961135e565b905060200201358152602001908152602001600020600101819055508080610bc09061153c565b9150506109bd565b506002546001600160a01b031615610c565760025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611555565b505b60015460408051633fc8cef360e01b815290516000926001600160a01b031691633fc8cef39160048083019260209291908290030181865afa158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc491906114e2565b6001600160a01b031614610dc057600160009054906101000a90046001600160a01b03166001600160a01b0316633fc8cef36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4991906114e2565b60015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190611555565b50505050505050505050565b610dd4610f43565b60015460405163b479a96160e01b8152600481018390526001600160a01b039091169063b479a961906024015b600060405180830381600087803b158015610e1b57600080fd5b505af1158015610e2f573d6000803e3d6000fd5b5050505050565b610e3e610f43565b60015460405163630429fb60e11b81526001600160a01b0383811660048301529091169063c60853f690602401610e01565b610e78610f43565b60015460405163e47ad74d60e01b8152600481018390526001600160a01b039091169063e47ad74d90602401610e01565b610eb1610f43565b6001600160a01b038116610f165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610357565b610f1f816110e2565b50565b60048181548110610f3257600080fd5b600091825260209091200154905081565b6000546001600160a01b031633146104555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610357565b6000805b600454811015610fe9574660048281548110610fbf57610fbf61135e565b906000526020600020015403610fd757809150610fe9565b80610fe18161153c565b915050610fa1565b50610ff5816001611464565b60045490915061100790600190611577565b811115611012575060005b90565b6000838152600360209081526040808320815160808101835281548152600180830154948201949094526002909101546001600160a01b03808216838501819052600160a01b90920461ffff166060840181905294549351633f6b724360e21b8152929493169263fdadc90c9261109692918a91899190899060040161158a565b6020604051808303816000875af11580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d991906114ff565b95945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114610f1f57600080fd5b600080600080600080600060c0888a03121561116257600080fd5b8735965060208801359550604088013561117b81611132565b9450606088013561118b81611132565b93506080880135925060a088013567ffffffffffffffff808211156111af57600080fd5b818a0191508a601f8301126111c357600080fd5b8135818111156111d257600080fd5b8b60208285010111156111e457600080fd5b60208301945080935050505092959891949750929550565b60008083601f84011261120e57600080fd5b50813567ffffffffffffffff81111561122657600080fd5b6020830191508360208260051b850101111561124157600080fd5b9250929050565b600080600080600080600080600060a08a8c03121561126657600080fd5b893561127181611132565b985060208a013567ffffffffffffffff8082111561128e57600080fd5b61129a8d838e016111fc565b909a50985060408c01359150808211156112b357600080fd5b6112bf8d838e016111fc565b909850965060608c01359150808211156112d857600080fd5b6112e48d838e016111fc565b909650945060808c01359150808211156112fd57600080fd5b5061130a8c828d016111fc565b915080935050809150509295985092959850929598565b60006020828403121561133357600080fd5b5035919050565b60006020828403121561134c57600080fd5b813561135781611132565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561139f57600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156113c557600080fd5b818601915086601f8301126113d957600080fd5b8135818111156113eb576113eb611374565b604051601f8201601f19908116603f0116810190838211818310171561141357611413611374565b8160405282815289602084870101111561142c57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052601160045260246000fd5b808201808211156114775761147761144e565b92915050565b6000815180845260005b818110156114a357602081850181015186830182015201611487565b506000602082860101526020601f19601f83011685010191505092915050565b8381528260208201526060604082015260006110d9606083018461147d565b6000602082840312156114f457600080fd5b815161135781611132565b60006020828403121561151157600080fd5b5051919050565b60006020828403121561152a57600080fd5b813561ffff8116811461135757600080fd5b60006001820161154e5761154e61144e565b5060010190565b60006020828403121561156757600080fd5b8151801515811461135757600080fd5b818103818111156114775761147761144e565b60018060a01b038616815284602082015260a0604082015260006115b160a083018661147d565b61ffff94909416606083015250901515608090910152939250505056fea2646970667358221220a986484854054fcb8218b5bb062bbf49bf1dcc84e5ddcdb20330467958b9565264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configureBridge(address,uint256[],uint256[],address[],uint16[])": {
        "notice": "OWNER "
      },
      "go()": {
        "notice": "Kicks off the initial message, which will then be sent from chain to chain until it ends up back at the original chain that sent the message. "
      },
      "messageProcess(uint256,uint256,address,address,uint256,bytes)": {
        "notice": "Called by the bridge, this is where we handle the received message from the source chain. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ATWTest.sol:ATWTest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 544,
        "contract": "contracts/ATWTest.sol:ATWTest",
        "label": "BRIDGE",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMessageV3)533"
      },
      {
        "astId": 547,
        "contract": "contracts/ATWTest.sol:ATWTest",
        "label": "FEE_TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)190"
      },
      {
        "astId": 561,
        "contract": "contracts/ATWTest.sol:ATWTest",
        "label": "CHAINS",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(ChainData)556_storage)"
      },
      {
        "astId": 220,
        "contract": "contracts/ATWTest.sol:ATWTest",
        "label": "chainlist",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMessageV3)533": {
        "encoding": "inplace",
        "label": "contract IMessageV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(ChainData)556_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MessageV3Client.ChainData)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainData)556_storage"
      },
      "t_struct(ChainData)556_storage": {
        "encoding": "inplace",
        "label": "struct MessageV3Client.ChainData",
        "members": [
          {
            "astId": 549,
            "contract": "contracts/ATWTest.sol:ATWTest",
            "label": "fee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 551,
            "contract": "contracts/ATWTest.sol:ATWTest",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 553,
            "contract": "contracts/ATWTest.sol:ATWTest",
            "label": "endpoint",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 555,
            "contract": "contracts/ATWTest.sol:ATWTest",
            "label": "confirmations",
            "offset": 20,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}