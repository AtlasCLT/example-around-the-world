{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ATWTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2023 Atlas (atlas@cryptolink.tech)\npragma solidity =0.8.17;\n\nimport \"./MessageV3Client.sol\";\n\ncontract ATWTest is MessageV3Client {\n    uint[] public chainlist;\n\n    event Go();\n    event Completed(uint _startChainId, uint hop);\n    event NextHop(uint startChainId, uint hop);\n\n    constructor(uint[] memory _chainlist) {\n        chainlist = _chainlist;\n    }\n\n    function go() external onlyOwner {\n        uint _myHop;\n        for(uint x; x < chainlist.length; x++) {\n            if(chainlist[x] == block.chainid) {\n                _myHop = x;\n                break;\n            }\n        }\n\n        string memory _message = \"Hello World!\";\n        bytes memory _newData = abi.encode(block.chainid, _myHop+1, _message);\n        _sendMessage(chainlist[_myHop+1], address(0), _newData);\n        emit Go();\n    }\n\n    function messageProcess(uint, uint _sourceChainId, address, address, uint, bytes calldata _data) external override onlyActiveBridge(_sourceChainId) {\n        (uint _startChainId, uint _hop, string memory _message) = abi.decode(_data, (uint, uint, string));\n\n        if(_startChainId == block.chainid) {\n            emit Completed(_startChainId, _hop);\n        } else {\n            _hop = _hop + 1;\n            if(_hop > chainlist.length-1) {\n                _hop = 0;\n            }\n\n            bytes memory _newData = abi.encode(_startChainId, _hop, _message);\n            _sendMessage(chainlist[_hop], address(0), _newData);\n            emit NextHop(_startChainId, _hop);\n        }\n    }\n}"
    },
    "contracts/IMessageV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2021-2023 Atlas\n// security-contact: atlas@cryptolink.tech\npragma solidity ^0.8.9;\n\ninterface IMessageV3 {\n    function chainsig() external view returns (address signer);\n    function weth() external view returns (address wethTokenAddress);\n    function feeToken() external view returns (address feeToken);\n    function feeTokenDecimals() external view returns (uint feeTokenDecimals);\n    function minFee() external view returns (uint minFee);\n    function bridgeEnabled() external view returns (bool bridgeEnabled);\n    function takeFeesOffline() external view returns (bool takeFeesOffline);\n    function whitelistOnly() external view returns (bool whitelistOnly);\n\n    function enabledChains(uint destChainId) external view returns (bool enabled);\n    function customSourceFee(address caller) external view returns (uint customSourceFee);\n    function maxgas(address caller) external view returns (uint maxgas);\n    function exsig(address caller) external view returns (address signer);\n\n    // @dev backwards compat with BridgeClient\n    function minTokenForChain(uint chainId) external returns (uint amount);\n\n    function sendMessage(address recipient, uint chain, bytes calldata data, uint16 confirmations, bool express) external returns (uint txId);\n    // @dev backwards compat with BridgeClient\n    function sendRequest(address recipient, uint chainId, uint amount, address referrer, bytes calldata data, uint16 confirmations) external returns (uint txId);\n\n    function setExsig(address signer) external;\n    function setMaxgas(uint maxgas) external;\n    function setMaxfee(uint maxfee) external;\n}"
    },
    "contracts/MessageV3Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// (c)2021-2023 Atlas\n// security-contact: atlas@cryptolink.tech\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IMessageV3.sol\";\n\n/**\n * @title MessageV3 Client\n * @author CryptoLink.Tech <atlas@cryptolink.tech>\n */\nabstract contract MessageV3Client is Ownable {\n    IMessageV3 public BRIDGE;\n    IERC20 public FEE_TOKEN;\n\n    struct ChainData {\n        uint fee; // MIN FEE in ether in \"feeToken\" normalized to 18 decimals\n        uint price; // fee for us (you) to charge on source when sending to this dest\n        address endpoint; // dest chain contract address\n        uint16 confirmations; // source confirmations\n    }\n\n    mapping(uint => ChainData) public CHAINS;\n\n    modifier onlySelfBridge(address _sender, uint _sourceChainId) {\n        require(msg.sender == address(BRIDGE), \"not authorized\");\n        require(_sender == CHAINS[_sourceChainId].endpoint, \"not authorized\");\n        _;\n    }\n\n    modifier onlyActiveBridge(uint _destinationChainId) {\n        require(CHAINS[_destinationChainId].endpoint != address(0), \"destination chain not active\");\n        _;\n    }\n\n    /** BRIDGE RECEIVER */\n    function messageProcess(uint, uint _sourceChainId, address _sender, address, uint, bytes calldata _data) external virtual onlySelfBridge (_sender, _sourceChainId) {\n    }\n\n    /** BRIDGE SENDER */\n    // @dev backwards compat with BridgeClientV2\n    function _sendMessage(uint _destinationChainId, address, bytes memory _data) internal returns (uint _txId) {\n        ChainData memory _chain = CHAINS[_destinationChainId];\n        return IMessageV3(BRIDGE).sendMessage(\n            _chain.endpoint,      // contract address on destination chain\n            _destinationChainId,  // id of the destination chain\n            _data,                // arbitrary data package to send\n            _chain.confirmations, // amount of required transaction confirmations\n            false                 // send express mode on destination\n        );\n    }\n\n    function _sendMessageExpress(uint _destinationChainId, address, bytes memory _data) internal returns (uint _txId) {\n        ChainData memory _chain = CHAINS[_destinationChainId];\n        return IMessageV3(BRIDGE).sendMessage(\n            _chain.endpoint,      // contract address on destination chain\n            _destinationChainId,  // id of the destination chain\n            _data,                // arbitrary data package to send\n            _chain.confirmations, // amount of required transaction confirmations\n            true                  // send express mode on destination\n        );\n    }\n\n    /** OWNER */\n    function configureBridge(\n        address _bridge, \n        uint[] calldata _chains,\n        uint[] calldata _prices,\n        address[] calldata _endpoints, \n        uint16[] calldata _confirmations\n    ) external onlyOwner {\n        if(_bridge == address(0)) {\n            if     (block.chainid == 1)         _bridge = address(0); // Ethereum\n            else if(block.chainid == 43114)     _bridge = address(0); // Avalanche\n            else if(block.chainid == 8453)      _bridge = address(0); // Base\n            else if(block.chainid == 56)        _bridge = address(0); // Binance\n            else if(block.chainid == 42220)     _bridge = address(0); // Celo \n            else if(block.chainid == 25)        _bridge = address(0); // Cronos\n            else if(block.chainid == 250)       _bridge = address(0); // Fantom\n            else if(block.chainid == 1777)      _bridge = address(0); // Gauss\n            else if(block.chainid == 1666600000)_bridge = address(0); // Harmony\n            else if(block.chainid == 1088)      _bridge = address(0); // Metis\n            else if(block.chainid == 42262)     _bridge = address(0); // Oasis\n            else if(block.chainid == 137)       _bridge = address(0); // Polygon\n            else if(block.chainid == 369)       _bridge = address(0); // Pulsechain\n\n            else if(block.chainid == 421614)     _bridge = address(0x0C78346555e9e04028C7C7b267dfc7d32f6B24D4); // Arbitrum Testnet (sepolia)\n            else if(block.chainid == 43113)      _bridge = address(0x8b7AA007eA9BF2Bf507a4eE9ff10093898eb3FC0); // Avalanche Testnet\n            else if(block.chainid == 84532)      _bridge = address(0x8507a0Bb83e5663E5BB4CacfF66f6E3c558C0726); // Base Testnet (sepolia)\n            else if(block.chainid == 97)         _bridge = address(0xcA877c797D599bE2Bf8C897a3B9eba6bA4113332); // Binance Testnet\n            else if(block.chainid == 44787)      _bridge = address(0xBD49b9156D288367a5364F9857a4e951374A0E87); // Celo Testnet\n            else if(block.chainid == 338)        _bridge = address(0xbcAc93907BD9436f956273aE8Ed431F092BD5590); // Cronos Testnet\n            else if(block.chainid == 4002)       _bridge = address(0xD07129F94934757A1653de9cb076910de39Fba6F); // Fantom Testnet\n            else if(block.chainid == 1452)       _bridge = address(0xAEB094Cb391cFf1978FD157D34FE146ba117b4ac); // Gauss Testnet\n            else if(block.chainid == 10200)      _bridge = address(0xF1FBB3E9977dAcF3909Ab541792cB2Bba10FFD5E); // Gnosis Testnet\n            else if(block.chainid == 1666700000) _bridge = address(0x9eF05C01d9A393eec6c26FCc2B726025ab14Ef31); // Harmony Testnet\n            else if(block.chainid == 599)        _bridge = address(0x46917eFCC99E624fE035AC9D02afB61141a53F7b); // Metis Testnet\n            else if(block.chainid == 65)         _bridge = address(0xc14D902deeFF0Efa668Dc0405A97685BBAd79Db3); // OKEx Testnet\n            else if(block.chainid == 11155420)   _bridge = address(0x18716F6E46a66919deacD3c6fd4fa6Da02fa30b2); // Optimism Testnet\n            else if(block.chainid == 80001)      _bridge = address(0x3CA2E8eCBe81C1a86E13415b0e7634A9a47270D6); // Polygon Testnet\n            else if(block.chainid == 1442)       _bridge = address(0xbcAc93907BD9436f956273aE8Ed431F092BD5590); // Polygon zkEVM Testnet\n            else if(block.chainid == 943)        _bridge = address(0x54c82B81Bbb4252543eE5055074Aba65D123dFA8); // Pulse Testnet\n            else if(block.chainid == 534351)     _bridge = address(0xB09780607F0cbCC3c7B95f17d42417269ED53a1D); // Scroll Testnet (sepolia)\n            else if(block.chainid == 195)        _bridge = address(0x46917eFCC99E624fE035AC9D02afB61141a53F7b); // X1 Testnet\n            require(_bridge != address(0), \"invalid chain in list\");\n        }\n\n        BRIDGE    = IMessageV3(_bridge);\n        FEE_TOKEN = IERC20(BRIDGE.feeToken());\n\n        uint _chainsLength = _chains.length;\n        for(uint x=0; x < _chainsLength; x++) {\n            CHAINS[_chains[x]].fee = BRIDGE.minTokenForChain(_chains[x]);\n            CHAINS[_chains[x]].confirmations = _confirmations[x];\n            CHAINS[_chains[x]].endpoint = _endpoints[x];\n            CHAINS[_chains[x]].price = _prices[x];\n        }\n\n        // approve bridge for source chain fees (limited per transaction with setMaxfee)\n        if(address(FEE_TOKEN) != address(0)) {\n            FEE_TOKEN.approve(address(BRIDGE), type(uint).max);\n        }\n\n        // approve bridge for destination gas fees (limited per transaction with setMaxgas)\n        if(address(BRIDGE.weth()) != address(0)) {\n            IERC20(BRIDGE.weth()).approve(address(BRIDGE), type(uint).max);\n        }\n    }\n\n    function setExsig(address _signer) external onlyOwner {\n        BRIDGE.setExsig(_signer);\n    }\n\n    function setMaxgas(uint _maxGas) external onlyOwner {\n        BRIDGE.setMaxgas(_maxGas);\n    }\n\n    function setMaxfee(uint _maxFee) external onlyOwner {\n        BRIDGE.setMaxfee(_maxFee);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}